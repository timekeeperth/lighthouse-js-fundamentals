PROGRAM STRUCTURE

A fragment of code that produces a value is called an expression.

Every value that is written literally (such as 22 or "PSUCHOANALYSIS") is an expression.

An expression between parenthesis is also an expression, as is a binary operator applied to two
expression or a unary operator applied to one.

If an expression corresponds to a sentence fragment, a JavsScript statement corresponds to a full sentence.

A program is a list of statements.

In some cases, JavaScript allows you to omit the semicolon at the end of a statement.
In other cases, it has to be there, or the next line will be treated as part of the same
statement.

Bindings

How does a program keep an internal state? How does it remember things?

To catch and hold values, JavaScript provides a thing called a BINDING, or VARIABLE:

let caught = 5 * 5;

That's a second kind of statement. The special word (keyword) 'let' indicates that
this sentence is going to define a binding. It is followed by the name of the binding and,
we want to immediately give it a value, by an = operator and an expression.

The previous statement creates a binding called 'caught' and uses it to grab hold of the number
that is produced by multiplying 5 by 5.

After a binding has been defined, its name can be used as an expression. The value of such an expression is the value
the binding currently holds. Here's an example:

let ten = 10;
console.log(ten * ten);
// -> 100

When a binding points at a value, that does not mean it is tied to that value forever.
The = operator can be used at any time on existing bindings to disconnect them from their
current value and have them point to a new one.

let mood = "light";
console.log(mood);
// -> light
mood = "dark";
console.log(mood);
// -> dark

You should imagine bindings as tentacles, rather than boxes. They do not contain values; they
GRASP them -- two bindings can refer to the same value. A program can access only the values that it
still has a reference to. When you need to remember something, you grow a tentacle to hold on to it or
you reattach one of your existing tentacles to it.

Another example. To remember the number of dollars that Luigi still owes you, you create a binding.

And when he pays back $35, you give this binding a new value.

let luigisDebt = 140;
luigisDebt = luigisDebt - 35;
console.log(luigisDebt)
// -> 105

A single let statement may define multiple bindings. The definitions must be separated by commas.

let one = 1, two = 2;
console.log(one + two);
// -> 3

The words 'var' and 'const' can also be used to create bindings, in a way similar to 'let'.

var name = "Ayda";
const greeting = "Hello ";
console.log(greeting + name);
// -> Hello Ayda

const stands for constant. It defines a constant binding, which points at the same value for as long as it lives.

BINDINGS names

Binding names can be any word. Digits can be part of binding names -- catch22 is a valid name, for example -- but the name
MUST NOT START WITH A DIGIT. A binding name may include dollar signs or underscores but no other punctuation or special characters.

Words with a special meaning, such as 'let', are KEYWORDS, and they may not be used as binding names.


THE ENVIRONMENT

The collection of bindings and their values that exists at a given time is called the ENVIRONMENT.

When a program starts up, this environment is not empty. It always contains bindings that are part of the language standard,
and most of the time, it also has bindings that provide ways to interact with the surrounding system.


functions

A lot of the values provided in the default environment have the type function. A function is a piece of program wrapped in a value.
Such values can be applied in order to run the wrapped program. For example, in a browser environment, the binding 'prompt' holds
a function that shows a little dialog box asking for user input. It is used like this:

prompt("Enter passcode");
